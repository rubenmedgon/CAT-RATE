@startuml diagrama

class Usuario{}

Ventana "1" o-- "1" Interfaz
Ventana "1"  o-- "6" Ficha
Ventana "1" o-- "6" Arma
Ventana "1" o-- "6" Onomatopeya
Ventana "1" o-- "2" Animacion
Interfaz "1" o-- "2" Ficha
Usuario "2" o-- "1" Ventana
Usuario "2" --|> "2" Animacion

class Ficha{
- texture: Texture
- textureBlock: Texture
- sprite: Sprite
- descubierta: bool
- tipo: int
+ Ficha(tip: int, x: int, y: int)
+ asignarTextura(tex: Texture): void
+ bloquearSprite(): void
+ desbloquearSprite(): void
+ consultarTipo(): int
+ consultarEstado(): bool
+ descubrir(): void
+ draw(rt: RenderTarget, rs: RenderStates): void
}

class Interfaz{
- fuego1: int
- agua1: int
- planta1: int
- fuego2: int
- agua2: int
- planta2: int
- ronda: int
- font: Font
- fuego1Text: Text
- agua1Text: Text
- planta1Text: Text
- fuego2Text: Text
- agua2Text: Text
- planta2Text: Text
- resultadoText: Text
- rondaText: Text
- pantallaNegra: RectangleShape
- mostrarPantallaNegra: bool
+ Interfaz()
+ update(): void
+ cambiarRonda(crum: int): void
+ cambiarFuego1(mod: int): void
+ cambiarAgua1(mod: int): void
+ cambiarPlanta1(mod: int): void
+ cambiarFuego2(mod: int): void
+ cambiarAgua2(mod: int): void
+ cambiarPlanta2(mod: int): void
+ consultarFuego1(): int
+ consultarAgua1(): int
+ consultarPlanta1(): int
+ consultarFuego2(): int
+ consultarAgua2(): int
+ consultarPlanta2(): int
+ draw(rt: RenderTarget, rs: RenderStates): void
}

class Ventana{
- window: RenderWindow
- fondo: Sprite
- texturaFondo: Texture
+ Ventana(title: string, width: int, height: int, route: string)
+ ObtenerVentana(): RenderWindow
+ dibujar(elemento: Drawable): void
+ Limpiar(): void
+ Mostrar(): void
}

class Arma{
- texture: Texture
- sprite2: Sprite
- tipo: int
+ Arma(tip: int, x: int, y: int)
+ darTextura(tex: Texture): void
+ desbloquearSprite(): void
+ draw(rt: RenderTarget, rs: RenderStates): void
}

class Onomatopeya{
- texture: Texture
- sprite2: Sprite
- tipo: int
+ Arma(tip: int, x: int, y: int)
+ darTextura(tex: Texture): void
+ desbloquearSprite(): void
+ draw(rt: RenderTarget, rs: RenderStates): void
}

class Animacion{
- sprite: Sprite
- texture: Texture
- clock: Clock
- currentFrame: int
- numFrames: int
- frameTime: float
- frameWidth: int
- frameHeight: int
+ Animacion(texturePath: string, numFrames: int, frameTime: float, frameWidth: int, frameHeight: int)
+ setPosition(x: float, y: float): void
+ update(): void
- draw(target: RenderTarget, states: RenderStates): void
}

@enduml